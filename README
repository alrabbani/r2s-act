This repository holds data and scripts for development of 
the 3D activation workflow.

Instructions to perform 3D Activation and example command line syntax: 

1)	Perform DAGMCNP forward neutron transport calculation. DAGMCNP input 
       should contain fmesh card with appropriate phase-space bins required for
       activation calculation.

		dagmcnp5 i=inp g=hemispheres.sat

2.a)   Run FluxParse.py on meshtal file. A flux normalization is needed. If the normalization 
	has been included in the input with the use of an FM card, then this should just be 1.
	A MOAB mesh will be created with the default name fluxparse_out.h5m. This mesh will contain 
	the neutron group-wise flux data. Additionally, an ALARA fluxin file will be created. 

		FluxParse.py meshtal 1

2.b)   If fluxparse_out.h5m is not a structured mesh, then it must be converted 
	using scdmesh_convert.py. A file with the name converted_scdmesh.h5m will be created.

		scdmesh_convert.py fluxparse_out.h5m

2.c)   If you are planning to use a specific photon energy group structure that is not the 
	default 42 group structure, create a file, e.g. ergs, that lists the energy group 
	boundaries, one per line, lowest energy first. The ergbins_to_h5m.py script is then 
	used to place these tags on the mesh.

		ergbins_to_h5m.py ergs converted_scdmesh.h5m

3)     Run mmgrid.py to obtain volume fractions of the spatial mesh elements represented
       in the converted_scdmesh.h5m. A mesh file named mmgrid_output.h5m will be created with 
       volume fractions data tagged on the mesh.

		mmgrid.py hemispheres.sat converted_scdmesh.h5m

4)     Run moab2alara.py to extract geometry and materials information from MOAB mesh
       and create ALARA geometry input file, alara_geom. 

		moab2alara.py mmgrid_output.h5m

5)     Add flux schedule and photon source output definitions to alara_geom to create a 
       complete ALARA input file. An ALARA material library will need to be created to 
       define the materials used in transport for the activation calculation. 

6)     Perform activation calculation. ALARA will produce photon source file.

		alara < alara_input > alara_output

7)	Run PhtnSrcToH5M.py to extract photon source data from text file and store it
	on the MOAB mesh. The input is a mesh file and the photon source file. The user
	can specify different cooling times and isotopes for which to tag the mesh.
        The defaults are the total source strengh (all isotopes) at shutdown.

		PhtnSrcToH5M.py -m mmgrid_output.h5m -p phtn_src

8)	Run gen_gammas.py to created gammas file needed for forward photon transport in
	DAGMCNP.

		gen_gammas.py mmgrid_output.h5m

9) 	Modify forward neutron DAGMCNP input to be suited for photon transport problem using 
	ModMCNPforPhotons.py.  Tallies will need to be changed by hand.  If the input file
        is a DAGMCNP input, include the -d flag; otherwise this can be omitted.

		ModMCNPforPhotons.py inp -d

10) 	Run forward photon transport problem with custom DAGMCNP compiled with unique source.F90 
	to obtain source sampling information from gammas file. A version of this custom
        executable is linked at /r2s/mcnp_source/mcnp5p. (You will need to specify this path
	in place of mcnp5p, below.)

		mcnp5p i=inp g=hemispheres.sat

