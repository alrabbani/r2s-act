# File auto-generated by gen_source_gamma_doc.py for parsing by sphinx-apidoc. Not an actual script.

"""mcnp_source/source_gamma.F90
============================
Summary
-------
Adapted from source routine (source_gamma_meshtal2.F90) provided by 
Dieter Leichtle from KIT.
Changes have been made by Eric Relson with UW-Madison/CNERG goals in mind.

This source file implements photon source sampling on a cartesian mesh.
Two photon position sampling methods are avaiable: 

(1) voxel sampling
(2) uniform sampling

Subroutine source reads in the file 'gammas' from the directory
that MCNP is being run in.  The gammas file has two parts - a header and
a listing of information for each voxel.

Header
-------
The header starts with 5 lines containing the following information:

(1) Number of intervals for x, y, z
(2) Mesh coordinates for x direction
(3) Mesh coordinates for y direction
(4) Mesh coordinates for z direction
(5) List of activated materials; use of this info requires the m parameter.

These are optionally followed by a parameters line (line 6). This line begins 
with a 'p', and single character parameters, separated by spaces, follow.
The currently supported parameters are (order does not matter):

* u: enable uniform sampling
* v: enable voxel sampling
* m: enable source position rejection based on activated materials
* e: read in custom list of energy bin boundaries
* d: enable debug output to file source_debug. Dumps xxx,yyy,zzz,wgt every 10k
  particles
* c: treat bins for each voxel as cumulative
* b: flag indicating bias values are used; only valid with voxel sampling

An example parameter line: `p u d m e`

If the parameters line is not present, the default is to set u, m, c as True.
If 'e' parameter exists, line 7 lists custom energy group boundaries, space
delimited. This line start with the integer number of groups. The default
energy bins are a 42 group structure.
All subsequent lines are for voxels.

Voxel lines
-------------
Two formats are supported, cumulative bins, or non-cumulative bins. In both
cases, lines list bin values from low energy to high energy, delimited by
spaces.

Note that the normalization for voxel and uniform sampling is different, and 
will result in differing gammas files. In general, for voxel sampling,
normalization is based on the average source strength in photons/voxel/s; 
For uniform sampling, we want average source strength in phtons/cm3/s.

As an exercise to verify that the gammas files are being generated correctly,
do a test problem and verify that you get the same average energy per source
particle in all test cases, and that all uniform sampling test cases have a
weight of 1.0 per source particle. (See the summary table in MCNP output)

Note that correct normalization also depends on whether
material rejection is being used.

In either case, the last bin can be followed by a bias value for the voxel.
An arbitrary range of bias values can be used since the source routine does
the necessary re-normalization for voxel sampling.

Other notes
--------------
Voxel sampling and energy sampling use a sampling technique referred to as
'alias discrete' or 'alias table' sampling.  This provides efficiency
benefits over 'direct discrete' sampling. Creation of the alias tables uses
the heap sort algorithm.

"""


def source_setup():
    """Subroutine handles parsing of the 'gammas' file and related initializations
    
    """
    pass

def read_header():
    """Read in first 5 lines of gammas file, as well as comment lines
    
    Parameters
    ----------
    myunit : int
        Unit number for an opened file (i.e. file 'gammas')
    
    Notes
    -----
    First 5 non-comment  lines contain the x,y,z mesh intervals
    and the list of active materials
    
    Also skips over any comment lines (beginning with # character) at start of
    file.
    
    """
    pass

def read_params():
    """Read in the parameters line, if there is one.
    
    Parameters
    ----------
    myunit : int
        Unit number for an opened file (i.e. file 'gammas')
    
    Notes
    -----
    Line should start with a 'p' and have single characters
    that are space delimited.
    
    Set various parameters to 1 (true) if they exist.
    """
    pass

def read_custom_ergs():
    """Read line from gammas file to get a custom set of energy bins
    """
    pass

def source():
    """Subroutine manages sampling of photons on mesh
    
    Adapted from dummy source.F90 file.
    
    Notes
    -----
    if nsr=0, subroutine source must be furnished by the user.
    at entrance, a random set of uuu,vvv,www has been defined.  the
    following variables must be defined within the subroutine:
    xxx,yyy,zzz,icl,jsu,erg,wgt,tme and possibly ipt,uuu,vvv,www.
    subroutine srcdx may also be needed.
    """
    pass

def voxel_sample():
    """Sample photon position from alias table of voxels.
    
    """
    pass

def sample_within_voxel():
    """Samples within the extents of a voxel
    
    Notes
    -----
    ii, jj, kk are presumed to have been already determined.
    """
    pass

def uniform_sample():
    """Uniformly sample photon position in the entire volume of the mesh tally.
    """
    pass

def sample_erg():
    """Sample the alias table of energy bins for the selected voxel. 
    
    Parameters
    ----------
    myerg : float (OUT)
        Sampled energy is stored in this variable
    myvoxel : int
        Index of sampled voxel
    n_grp : int
        Number of energy groups
    n_vox : int
        Length of next two arrays
    probList : list of lists of floats
        List of alias pair probabilities for energy PDF, for each voxel
    pairsList : list of lists of [int, int] pairs
        Bin and alias indices for energy group, for each voxel
    """
    pass

def gen_erg_alias_table():
    """Create alias table for energy bins of a single voxel
    
    Parameters
    ----------
    len : int
        length of ergsList
    ergsList : list of floats
        ergsList values must total 1!
    myErgPairs : list of [int, int] (OUT)
        The generated pairs of bin and alias indices for the energy PDF
    myErgPairsProbabilities : list of floats (OUT)
        List of probabilities for first bin in each alias pair.
    
    """
    pass

def gen_voxel_alias_table():
    """Generate alias table for voxels in the problem
    
    Notes
    -----
    The resulting alias table is stored in lists `pairs` and `pairsProbabilities`.
    
    tot_list does not have to be normalized prior to calling this subroutine
    """
    pass

def gen_alias_table():
    """Subroutine generates an alias table
    
    Parameters
    ----------
    bins : list of [int, float] pairs (INOUT)
        PDF's bin indices and absolute probabilities.
    pairs : list of [int, int] pairs (OUT)
        Filled with pairs of bin and alias indices.
    probs_list : list of floats (OUT)
        List of probabilities for first bin in each alias pair.
    len : int
        Number of bins in the alias table
    
    Notes
    -----
    note that bins is a list of pairs of the form (probability,value)
    The sum of the probabilities in bins must be 1.
    
    We implement the alias table creation algorithm described by Vose (1991).
    For reference::
    
      Vose:      Code:
      p_j        bins(j,1)
      large_l    ind_large(l)
      small_s    ind_small(s)
      prob_j     probs_list(j)
      'bin' j    pairs(j,1)
      alias_j    pairs(j,2)
    
    """
    pass

def print_debug():
    """Subroutine stores debug info in an array, and write the array to a file
    after every 10000 particles.
    
    """
    pass

